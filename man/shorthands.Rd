% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/02_dubious_wrappers.R
\name{shorthands}
\alias{shorthands}
\alias{\%?\%}
\alias{?~}
\alias{?e~}
\alias{?i~}
\title{Shorthands for 'testthat' expectations}
\usage{
desc \%?\% code

"?~"(object, info = NULL, label = NULL)

"?e~"(object, expected, ..., info = NULL, label = NULL,
  expected.label = NULL)

"?i~"(object, expected, info = NULL, label = NULL,
  expected.label = NULL, ...)
}
\arguments{
\item{object}{Computation and value to compare it to.

Both arguments supports limited unquoting to make it easier to generate
readable failures within a function or for loop. See \link{quasi_label} for
more details.}

\item{info}{Extra information to be included in the message. This argument
is soft-deprecated and should not be used in new code. Instead see
alternatives in \link{quasi_label}.}

\item{label}{Used to customise failure messages. For expert
use only.}

\item{expected}{Computation and value to compare it to.

Both arguments supports limited unquoting to make it easier to generate
readable failures within a function or for loop. See \link{quasi_label} for
more details.}

\item{...}{For \code{expect_equal()} and \code{expect_equivalent()}, passed on
\code{\link[=compare]{compare()}}, for \code{expect_identical()} passed on to \code{\link[=identical]{identical()}}.
Used to control the details of the comparison.}

\item{expected.label}{Used to customise failure messages. For expert
use only.}
}
\description{
These operators are powered by the package *doubt* and make testing very compact.
* `?~` is `testthat::expect_true()`
* `?e~` is `testthat::expect_equal()`
* `?i~` is `testthat::expect_identical`
These operators have various intteresting properties
* They support the unary notation, which allows us to write `?~ is.numeric(2)`
* They support infix notation AND left hand side n-ary notation so that you
 choose between `tan(pi/4) ?e~ 1`, or, `?e~ tan(pi/4) ? 1`
* They have the lowest precedence, which means for instance that `2 ?i~ 1 + 1`
doesn't need brackets.

This is an infix version of `testthat::test_that()`, compact and handy to
highlight the description and spare brackets.
}
\details{
rather than `TRUE ?e~ is.numeric(2)`.
}
